"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
const retry_1 = require("../retry");
/**
 * Represents the Connection policy associated with a CosmosClient in the Azure Cosmos DB database service.
 */
class ConnectionPolicy {
    constructor() {
        /** Determines which mode to connect to Cosmos with. (Currently only supports Gateway option) */
        this.ConnectionMode = _1.ConnectionMode.Gateway;
        /** Attachment content (aka media) download mode. Should be one of the values of {@link MediaReadMode} */
        this.MediaReadMode = _1.MediaReadMode.Buffered;
        /** Time to wait for response from network peer for attachment content (aka media) operations. Represented in milliseconds. */
        this.MediaRequestTimeout = ConnectionPolicy.defaultMediaRequestTimeout;
        /** Request timeout (time to wait for response from network peer). Represented in milliseconds. */
        this.RequestTimeout = ConnectionPolicy.defaultRequestTimeout;
        /** Flag to enable/disable automatic redirecting of requests based on read/write operations. */
        this.EnableEndpointDiscovery = true;
        /** List of azure regions to be used as preferred locations for read requests. */
        this.PreferredLocations = [];
        /** RetryOptions instance which defines several configurable properties used during retry. */
        this.RetryOptions = new retry_1.RetryOptions();
        /**
         * Flag to disable SSL verification for the requests. SSL verification is enabled by default. Don't set this when targeting production endpoints.
         * This is intended to be used only when targeting emulator endpoint to avoid failing your requests with SSL related error.
         */
        this.DisableSSLVerification = false;
        /** Http/Https proxy url */
        this.ProxyUrl = "";
        /**
         * The flag that enables writes on any locations (regions) for geo-replicated database accounts in the Azure Cosmos DB service.
         * Default is `false`.
         */
        this.UseMultipleWriteLocations = false;
    }
}
ConnectionPolicy.defaultRequestTimeout = 60000;
ConnectionPolicy.defaultMediaRequestTimeout = 300000;
exports.ConnectionPolicy = ConnectionPolicy;
//# sourceMappingURL=ConnectionPolicy.js.map