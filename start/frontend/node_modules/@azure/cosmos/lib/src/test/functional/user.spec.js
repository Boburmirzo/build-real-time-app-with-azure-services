"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const TestHelpers_1 = require("../common/TestHelpers");
describe("NodeJS CRUD Tests", function () {
    this.timeout(process.env.MOCHA_TIMEOUT || 10000);
    beforeEach(function () {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield TestHelpers_1.removeAllDatabases();
        });
    });
    describe("Validate User CRUD", function () {
        const userCRUDTest = function (isUpsertTest) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // create database
                const database = yield TestHelpers_1.getTestDatabase("Validate user CRUD");
                // list users
                const { result: users } = yield database.users.readAll().toArray();
                assert_1.default.equal(users.constructor, Array, "Value should be an array");
                const beforeCreateCount = users.length;
                // create user
                const { body: userDef } = yield TestHelpers_1.createOrUpsertUser(database, { id: "new user" }, undefined, isUpsertTest);
                assert_1.default.equal(userDef.id, "new user", "user name error");
                let user = database.user(userDef.id);
                // list users after creation
                const { result: usersAfterCreation } = yield database.users.readAll().toArray();
                assert_1.default.equal(usersAfterCreation.length, beforeCreateCount + 1);
                // query users
                const querySpec = {
                    query: "SELECT * FROM root r WHERE r.id=@id",
                    parameters: [
                        {
                            name: "@id",
                            value: "new user"
                        }
                    ]
                };
                const { result: results } = yield database.users.query(querySpec).toArray();
                assert_1.default(results.length > 0, "number of results for the query should be > 0");
                // replace user
                userDef.id = "replaced user";
                let replacedUser;
                if (isUpsertTest) {
                    const r = yield database.users.upsert(userDef);
                    replacedUser = r.body;
                }
                else {
                    const r = yield user.replace(userDef);
                    replacedUser = r.body;
                }
                assert_1.default.equal(replacedUser.id, "replaced user", "user name should change");
                assert_1.default.equal(userDef.id, replacedUser.id, "user id should stay the same");
                user = database.user(replacedUser.id);
                // read user
                const { body: userAfterReplace } = yield user.read();
                assert_1.default.equal(replacedUser.id, userAfterReplace.id);
                // delete user
                const { body: res } = yield user.delete();
                // read user after deletion
                try {
                    yield user.read();
                    assert_1.default.fail("Must fail to read user after deletion");
                }
                catch (err) {
                    const notFoundErrorCode = 404;
                    assert_1.default.equal(err.code, notFoundErrorCode, "response should return error code 404");
                }
            });
        };
        it("nativeApi Should do User CRUD operations successfully name based", function () {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                yield userCRUDTest(false);
            });
        });
        it("nativeApi Should do User CRUD operations successfully name based with upsert", function () {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                yield userCRUDTest(true);
            });
        });
    });
});
//# sourceMappingURL=user.spec.js.map