"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const CosmosClient_1 = require("../../CosmosClient");
const documents_1 = require("../../documents");
const _testConfig_1 = require("../common/_testConfig");
// This test requires a multi-region write enabled account with at least two regions.
(process.env.TESTS_MULTIREGION ? describe : describe.skip)("Multi-region tests", function () {
    this.timeout(process.env.MOCHA_TIMEOUT || "30000");
    let preferredLocations = [];
    let dbAccount;
    before(function () {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const client = new CosmosClient_1.CosmosClient({ endpoint: _testConfig_1.endpoint, auth: { masterKey: _testConfig_1.masterKey } });
            ({ body: dbAccount } = yield client.getDatabaseAccount());
            // We reverse the order of the preferred locations list to make sure
            // we don't just follow the order we got back from the server
            preferredLocations = dbAccount.readableLocations.map(v => v.name).reverse();
            assert_1.default(preferredLocations.length > 1, "Not a multi-region account. Please add a region before running this test again.");
        });
    });
    it("Preferred locations should be honored for readEndpoint", function () {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const connectionPolicy = new documents_1.ConnectionPolicy();
            connectionPolicy.PreferredLocations = preferredLocations;
            const client = new CosmosClient_1.CosmosClient({ endpoint: _testConfig_1.endpoint, auth: { masterKey: _testConfig_1.masterKey }, connectionPolicy });
            const currentReadEndpoint = yield client.getReadEndpoint();
            assert_1.default(currentReadEndpoint.includes(preferredLocations[0].toLowerCase().replace(/ /g, "")), "The readendpoint should be the first preferred location");
        });
    });
    it("Preferred locations should be honored for writeEndpoint", function () {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            assert_1.default(dbAccount.enableMultipleWritableLocations, "MultipleWriteableLocations must be set on your database account for this test to work");
            const connectionPolicy = new documents_1.ConnectionPolicy();
            connectionPolicy.PreferredLocations = preferredLocations;
            connectionPolicy.UseMultipleWriteLocations = true;
            const client = new CosmosClient_1.CosmosClient({ endpoint: _testConfig_1.endpoint, auth: { masterKey: _testConfig_1.masterKey }, connectionPolicy });
            const currentWriteEndpoint = yield client.getWriteEndpoint();
            assert_1.default(currentWriteEndpoint.includes(preferredLocations[0].toLowerCase().replace(/ /g, "")), "The writeendpoint should be the first preferred location");
        });
    });
});
//# sourceMappingURL=multiregion.spec.js.map