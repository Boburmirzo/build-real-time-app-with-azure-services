"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const TestHelpers_1 = require("../common/TestHelpers");
const containerId = "sample container";
describe("NodeJS CRUD Tests", function () {
    this.timeout(process.env.MOCHA_TIMEOUT || 10000);
    beforeEach(function () {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield TestHelpers_1.removeAllDatabases();
        });
    });
    describe("User Defined Function", function () {
        let container;
        beforeEach(function () {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // create database
                const database = yield TestHelpers_1.getTestDatabase("udf test database");
                // create container
                yield database.containers.create({ id: containerId });
                container = yield database.container(containerId);
            });
        });
        it("nativeApi Should do UDF CRUD operations successfully", function () {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const { result: udfs } = yield container.userDefinedFunctions.readAll().toArray();
                // create a udf
                const beforeCreateUdfsCount = udfs.length;
                const udfDefinition = {
                    id: "sample udf",
                    body: "function () { const x = 10; }"
                };
                // TODO also handle upsert case
                const { body: udf } = yield container.userDefinedFunctions.create(udfDefinition);
                assert_1.default.equal(udf.id, udfDefinition.id);
                assert_1.default.equal(udf.body, "function () { const x = 10; }");
                // read udfs after creation
                const { result: udfsAfterCreate } = yield container.userDefinedFunctions.readAll().toArray();
                assert_1.default.equal(udfsAfterCreate.length, beforeCreateUdfsCount + 1, "create should increase the number of udfs");
                // query udfs
                const querySpec = {
                    query: "SELECT * FROM root r WHERE r.id=@id",
                    parameters: [
                        {
                            name: "@id",
                            value: udfDefinition.id
                        }
                    ]
                };
                const { result: results } = yield container.userDefinedFunctions.query(querySpec).toArray();
                assert_1.default(results.length > 0, "number of results for the query should be > 0");
                // replace udf
                udfDefinition.body = "function () { const x = 10; }";
                const { body: replacedUdf } = yield container.userDefinedFunction(udfDefinition.id).replace(udfDefinition);
                assert_1.default.equal(replacedUdf.id, udfDefinition.id);
                assert_1.default.equal(replacedUdf.body, "function () { const x = 10; }");
                // read udf
                const { body: udfAfterReplace } = yield container.userDefinedFunction(replacedUdf.id).read();
                assert_1.default.equal(replacedUdf.id, udfAfterReplace.id);
                // delete udf
                const { body: res } = yield container.userDefinedFunction(replacedUdf.id).delete();
                // read udfs after deletion
                try {
                    const { body: badudf } = yield container.userDefinedFunction(replacedUdf.id).read();
                    assert_1.default.fail("Must fail to read after delete");
                }
                catch (err) {
                    const notFoundErrorCode = 404;
                    assert_1.default.equal(err.code, notFoundErrorCode, "response should return error code 404");
                }
            });
        });
        it("nativeApi Should do UDF CRUD operations successfully", function () {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const { result: udfs } = yield container.userDefinedFunctions.readAll().toArray();
                // create a udf
                const beforeCreateUdfsCount = udfs.length;
                const udfDefinition = {
                    id: "sample udf",
                    body: "function () { const x = 10; }"
                };
                const { body: udf } = yield container.userDefinedFunctions.upsert(udfDefinition);
                assert_1.default.equal(udf.id, udfDefinition.id);
                assert_1.default.equal(udf.body, "function () { const x = 10; }");
                // read udfs after creation
                const { result: udfsAfterCreate } = yield container.userDefinedFunctions.readAll().toArray();
                assert_1.default.equal(udfsAfterCreate.length, beforeCreateUdfsCount + 1, "create should increase the number of udfs");
                // query udfs
                const querySpec = {
                    query: "SELECT * FROM root r WHERE r.id=@id",
                    parameters: [
                        {
                            name: "@id",
                            value: udfDefinition.id
                        }
                    ]
                };
                const { result: results } = yield container.userDefinedFunctions.query(querySpec).toArray();
                assert_1.default(results.length > 0, "number of results for the query should be > 0");
                // replace udf
                udfDefinition.body = "function () { const x = 10; }";
                const { body: replacedUdf } = yield container.userDefinedFunctions.upsert(udfDefinition);
                assert_1.default.equal(replacedUdf.id, udfDefinition.id);
                assert_1.default.equal(replacedUdf.body, "function () { const x = 10; }");
                // read udf
                const { body: udfAfterReplace } = yield container.userDefinedFunction(replacedUdf.id).read();
                assert_1.default.equal(replacedUdf.id, udfAfterReplace.id);
                // delete udf
                const { body: res } = yield container.userDefinedFunction(replacedUdf.id).delete();
                // read udfs after deletion
                try {
                    const { body: badudf } = yield container.userDefinedFunction(replacedUdf.id).read();
                    assert_1.default.fail("Must fail to read after delete");
                }
                catch (err) {
                    const notFoundErrorCode = 404;
                    assert_1.default.equal(err.code, notFoundErrorCode, "response should return error code 404");
                }
            });
        });
    });
});
//# sourceMappingURL=udf.spec.js.map