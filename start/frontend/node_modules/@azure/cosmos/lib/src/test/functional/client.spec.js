"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const http_1 = require("http");
const __1 = require("../..");
const _testConfig_1 = require("../common/_testConfig");
const TestHelpers_1 = require("../common/TestHelpers");
describe("NodeJS CRUD Tests", function () {
    this.timeout(process.env.MOCHA_TIMEOUT || 20000);
    describe("Validate client request timeout", function () {
        it("nativeApi Client Should throw exception", function () {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const connectionPolicy = new __1.DocumentBase.ConnectionPolicy();
                // making timeout 5 ms to make sure it will throw
                // (create database request takes 10ms-15ms to finish on emulator)
                connectionPolicy.RequestTimeout = 1;
                const client = new __1.CosmosClient({ endpoint: _testConfig_1.endpoint, auth: { masterKey: _testConfig_1.masterKey }, connectionPolicy });
                // create database
                try {
                    yield TestHelpers_1.getTestDatabase("request timeout", client);
                    assert_1.default.fail("Must throw when trying to connect to database");
                }
                catch (err) {
                    assert_1.default.equal(err.code, "ECONNRESET", "client should throw exception");
                }
            });
        });
    });
    describe("Constructor", function () {
        it("Should work with a non-class based Connection Policy", function () {
            const client = new __1.CosmosClient({
                endpoint: "https://faaaaaake.com",
                auth: { masterKey: "" },
                connectionPolicy: {
                    RequestTimeout: 10000
                }
            });
            assert_1.default.ok(client !== undefined, "client shouldn't be undefined if it succeeded");
        });
        it("Accepts node Agent", function () {
            const client = new __1.CosmosClient({
                endpoint: "https://faaaaaake.com",
                auth: { masterKey: "" },
                agent: new http_1.Agent()
            });
            assert_1.default.ok(client !== undefined, "client shouldn't be undefined if it succeeded");
        });
    });
});
//# sourceMappingURL=client.spec.js.map