"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const os = tslib_1.__importStar(require("os"));
const util = tslib_1.__importStar(require("util"));
const __1 = require("../..");
const common_1 = require("../../common");
// var assert = require("assert")
//     , Contants = require("../lib/constants")
//     , os = require("os")
//     , Platform = require("../lib/platform")
//     , util = require("util");
describe("Platform.getUserAgent", function () {
    it("getUserAgent()", function () {
        const userAgent = common_1.Platform.getUserAgent();
        const expectedUserAgent = util.format("%s/%s Nodejs/%s azure-cosmos-js/%s", os.platform(), os.release(), process.version, __1.Constants.SDKVersion);
        assert_1.default.strictEqual(userAgent, expectedUserAgent, "invalid UserAgent format");
    });
    describe("Platform._getSafeUserAgentSegmentInfo()", function () {
        it("Removing spaces", function () {
            const safeString = common_1.Platform._getSafeUserAgentSegmentInfo("a b    c");
            assert_1.default.strictEqual(safeString, "abc");
        });
        it("empty string handling", function () {
            const safeString = common_1.Platform._getSafeUserAgentSegmentInfo("");
            assert_1.default.strictEqual(safeString, "unknown");
        });
        it("undefined", function () {
            const safeString = common_1.Platform._getSafeUserAgentSegmentInfo(undefined);
            assert_1.default.strictEqual(safeString, "unknown");
        });
        it("null", function () {
            const safeString = common_1.Platform._getSafeUserAgentSegmentInfo(null);
            assert_1.default.strictEqual(safeString, "unknown");
        });
    });
});
describe("Version", function () {
    it("should have matching constant version & package version", function () {
        const packageJson = require("../../../package.json");
        const packageVersion = packageJson["version"];
        const constantVersion = __1.Constants.SDKVersion;
        assert_1.default.equal(constantVersion, packageVersion, "Package.json and Constants.SDKVersion don't match");
    });
});
//# sourceMappingURL=plaftorm.spec.js.map