"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const queryMetrics_1 = require("../../queryMetrics");
describe("QueryMetrics", function () {
    // Properties
    const totalQueryExecutionTime = queryMetrics_1.TimeSpan.fromMilliseconds(33.67);
    const queryCompilationTime = queryMetrics_1.TimeSpan.fromMilliseconds(0.06);
    const logicalPlanBuildTime = queryMetrics_1.TimeSpan.fromMilliseconds(0.02);
    const physicalPlanBuildTime = queryMetrics_1.TimeSpan.fromMilliseconds(0.1);
    const queryOptimizationTime = queryMetrics_1.TimeSpan.fromMilliseconds(0.01);
    const vmExecutionTime = queryMetrics_1.TimeSpan.fromMilliseconds(32.56);
    const indexLookupTime = queryMetrics_1.TimeSpan.fromMilliseconds(0.36);
    const documentLoadTime = queryMetrics_1.TimeSpan.fromMilliseconds(9.58);
    const systemFunctionExecutionTime = queryMetrics_1.TimeSpan.fromMilliseconds(0.05);
    const userDefinedFunctionExecutionTime = queryMetrics_1.TimeSpan.fromMilliseconds(0.07);
    const documentWriteTime = queryMetrics_1.TimeSpan.fromMilliseconds(18.1);
    const retrievedDocumentCount = 2000;
    const retrievedDocumentSize = 1125600;
    const outputDocumentCount = 2000;
    const outputDocumentSize = 1125600;
    const indexUtilizationRatio = 1.0;
    const requestCharge = 42;
    const delimitedString = "totalExecutionTimeInMs=33.67;queryCompileTimeInMs=0.06;queryLogicalPlanBuildTimeInMs=0.02;queryPhysicalPlanBuildTimeInMs=0.10;queryOptimizationTimeInMs=0.01;VMExecutionTimeInMs=32.56;indexLookupTimeInMs=0.36;documentLoadTimeInMs=9.58;systemFunctionExecuteTimeInMs=0.05;userFunctionExecuteTimeInMs=0.07;retrievedDocumentCount=2000;retrievedDocumentSize=1125600;outputDocumentCount=2000;outputDocumentSize=1125600;writeOutputTimeInMs=18.10;indexUtilizationRatio=1.00";
    const queryEngineExecutionTime = queryMetrics_1.TimeSpan.zero
        .add(vmExecutionTime)
        .subtract(indexLookupTime)
        .subtract(documentLoadTime)
        .subtract(documentWriteTime);
    // Base line query metrics
    const queryMetrics = new queryMetrics_1.QueryMetrics(retrievedDocumentCount, retrievedDocumentSize, outputDocumentCount, outputDocumentSize, indexUtilizationRatio * retrievedDocumentCount, totalQueryExecutionTime, new queryMetrics_1.QueryPreparationTimes(queryCompilationTime, logicalPlanBuildTime, physicalPlanBuildTime, queryOptimizationTime), indexLookupTime, documentLoadTime, vmExecutionTime, new queryMetrics_1.RuntimeExecutionTimes(queryEngineExecutionTime, systemFunctionExecutionTime, userDefinedFunctionExecutionTime), documentWriteTime, new queryMetrics_1.ClientSideMetrics(requestCharge));
    const assertQueryMetricsEquality = function (queryMetrics1, queryMetrics2) {
        assert_1.default.deepEqual(queryMetrics1.indexHitRatio, queryMetrics2.indexHitRatio);
        assert_1.default.deepEqual(queryMetrics1.outputDocumentCount, queryMetrics2.outputDocumentCount);
        assert_1.default.deepEqual(queryMetrics1.outputDocumentSize, queryMetrics2.outputDocumentSize);
        assert_1.default.deepEqual(queryMetrics1.retrievedDocumentCount, queryMetrics2.retrievedDocumentCount);
        assert_1.default.deepEqual(queryMetrics1.retrievedDocumentSize, queryMetrics2.retrievedDocumentSize);
        assert_1.default.deepEqual(queryMetrics1.totalQueryExecutionTime, queryMetrics2.totalQueryExecutionTime);
        assert_1.default.deepEqual(queryMetrics1.documentLoadTime, queryMetrics2.documentLoadTime);
        assert_1.default.deepEqual(queryMetrics1.documentWriteTime, queryMetrics2.documentWriteTime);
        assert_1.default.deepEqual(queryMetrics1.indexLookupTime, queryMetrics2.indexLookupTime);
        assert_1.default.deepEqual(queryMetrics1.vmExecutionTime, queryMetrics2.vmExecutionTime);
        assert_1.default.deepEqual(queryMetrics1.queryPreparationTimes.logicalPlanBuildTime, queryMetrics2.queryPreparationTimes.logicalPlanBuildTime);
        assert_1.default.deepEqual(queryMetrics1.queryPreparationTimes.physicalPlanBuildTime, queryMetrics2.queryPreparationTimes.physicalPlanBuildTime);
        assert_1.default.deepEqual(queryMetrics1.queryPreparationTimes.queryCompilationTime, queryMetrics2.queryPreparationTimes.queryCompilationTime);
        assert_1.default.deepEqual(queryMetrics1.queryPreparationTimes.queryOptimizationTime, queryMetrics2.queryPreparationTimes.queryOptimizationTime);
        assert_1.default.deepEqual(queryMetrics1.runtimeExecutionTimes.queryEngineExecutionTime, queryMetrics2.runtimeExecutionTimes.queryEngineExecutionTime);
        assert_1.default.deepEqual(queryMetrics1.runtimeExecutionTimes.systemFunctionExecutionTime, queryMetrics2.runtimeExecutionTimes.systemFunctionExecutionTime);
        assert_1.default.deepEqual(queryMetrics1.runtimeExecutionTimes.userDefinedFunctionExecutionTime, queryMetrics2.runtimeExecutionTimes.userDefinedFunctionExecutionTime);
        assert_1.default.deepEqual(queryMetrics1.clientSideMetrics.requestCharge, queryMetrics2.clientSideMetrics.requestCharge);
    };
    it("Can Be Cloned", function () {
        const queryMetrics2 = new queryMetrics_1.QueryMetrics(queryMetrics.retrievedDocumentCount, queryMetrics.retrievedDocumentSize, queryMetrics.outputDocumentCount, queryMetrics.outputDocumentSize, queryMetrics.indexHitDocumentCount, queryMetrics.totalQueryExecutionTime, queryMetrics.queryPreparationTimes, queryMetrics.indexLookupTime, queryMetrics.documentLoadTime, queryMetrics.vmExecutionTime, queryMetrics.runtimeExecutionTimes, queryMetrics.documentWriteTime, queryMetrics.clientSideMetrics);
        assertQueryMetricsEquality(queryMetrics, queryMetrics2);
    });
    it("Should Add Two Query Metrics", function () {
        const doubleQueryMetrics = queryMetrics.add([queryMetrics]);
        const doubleRetrievedDocumentCount = retrievedDocumentCount * 2;
        const doubleRetrievedDocumentSize = retrievedDocumentSize * 2;
        const doubleOutputDocumentCount = outputDocumentCount * 2;
        const doubleOutputDocumentSize = outputDocumentSize * 2;
        const doubleIndexHitCount = indexUtilizationRatio * retrievedDocumentCount * 2;
        const doubleTotalQueryExecutionTime = queryMetrics_1.TimeSpan.fromMilliseconds(totalQueryExecutionTime.totalMilliseconds() * 2);
        const doubleQueryCompilationTime = queryMetrics_1.TimeSpan.fromMilliseconds(queryCompilationTime.totalMilliseconds() * 2);
        const doubleLogicalPlanBuildTime = queryMetrics_1.TimeSpan.fromMilliseconds(logicalPlanBuildTime.totalMilliseconds() * 2);
        const doublePhysicalPlanBuildTime = queryMetrics_1.TimeSpan.fromMilliseconds(physicalPlanBuildTime.totalMilliseconds() * 2);
        const doubleIndexLookupTime = queryMetrics_1.TimeSpan.fromMilliseconds(indexLookupTime.totalMilliseconds() * 2);
        const doubleDocumentLoadTime = queryMetrics_1.TimeSpan.fromMilliseconds(documentLoadTime.totalMilliseconds() * 2);
        const doubleVMExecutionTime = queryMetrics_1.TimeSpan.fromMilliseconds(vmExecutionTime.totalMilliseconds() * 2);
        const doubleQueryOptimizationTime = queryMetrics_1.TimeSpan.fromMilliseconds(queryOptimizationTime.totalMilliseconds() * 2);
        const doubleQueryEngineExecutionTime = queryMetrics_1.TimeSpan.fromMilliseconds(queryEngineExecutionTime.totalMilliseconds() * 2);
        const doubleSystemFunctionExecutionTime = queryMetrics_1.TimeSpan.fromMilliseconds(systemFunctionExecutionTime.totalMilliseconds() * 2);
        const doubleUserDefinedFunctionExecutionTime = queryMetrics_1.TimeSpan.fromMilliseconds(userDefinedFunctionExecutionTime.totalMilliseconds() * 2);
        const doubleDocumentWriteTime = queryMetrics_1.TimeSpan.fromMilliseconds(documentWriteTime.totalMilliseconds() * 2);
        const doubleRequestCharge = requestCharge * 2;
        const expectedQueryMetrics = new queryMetrics_1.QueryMetrics(doubleRetrievedDocumentCount, doubleRetrievedDocumentSize, doubleOutputDocumentCount, doubleOutputDocumentSize, doubleIndexHitCount, doubleTotalQueryExecutionTime, new queryMetrics_1.QueryPreparationTimes(doubleQueryCompilationTime, doubleLogicalPlanBuildTime, doublePhysicalPlanBuildTime, doubleQueryOptimizationTime), doubleIndexLookupTime, doubleDocumentLoadTime, doubleVMExecutionTime, new queryMetrics_1.RuntimeExecutionTimes(doubleQueryEngineExecutionTime, doubleSystemFunctionExecutionTime, doubleUserDefinedFunctionExecutionTime), doubleDocumentWriteTime, new queryMetrics_1.ClientSideMetrics(doubleRequestCharge));
        assertQueryMetricsEquality(doubleQueryMetrics, expectedQueryMetrics);
        const queryMetricsFromCreateArray = queryMetrics_1.QueryMetrics.createFromArray([queryMetrics, queryMetrics]);
        assertQueryMetricsEquality(queryMetricsFromCreateArray, expectedQueryMetrics);
    });
    it("Can Be Create From Delimited String", function () {
        const queryMetricsFromDelimitedString = queryMetrics_1.QueryMetrics.createFromDelimitedString(delimitedString, new queryMetrics_1.ClientSideMetrics(requestCharge));
        assertQueryMetricsEquality(queryMetricsFromDelimitedString, queryMetrics);
    });
    it("Can Be Converted To A Delimited String", function () {
        const delimitedStringFromMetrics = queryMetrics.toDelimitedString();
        const queryMetricsFromDelimitedString = queryMetrics_1.QueryMetrics.createFromDelimitedString(delimitedStringFromMetrics, new queryMetrics_1.ClientSideMetrics(requestCharge));
        assertQueryMetricsEquality(queryMetrics, queryMetricsFromDelimitedString);
    });
});
//# sourceMappingURL=queryMetrics.spec.js.map