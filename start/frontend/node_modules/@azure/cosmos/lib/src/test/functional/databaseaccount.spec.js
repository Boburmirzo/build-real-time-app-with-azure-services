"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const __1 = require("../..");
const _testConfig_1 = require("../common/_testConfig");
const TestHelpers_1 = require("../common/TestHelpers");
const client = new __1.CosmosClient({ endpoint: _testConfig_1.endpoint, auth: { masterKey: _testConfig_1.masterKey } });
describe("NodeJS CRUD Tests", function () {
    this.timeout(process.env.MOCHA_TIMEOUT || 10000);
    beforeEach(function () {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.timeout(process.env.MOCHA_TIMEOUT || 10000);
            yield TestHelpers_1.removeAllDatabases();
        });
    });
    describe("validate database account functionality", function () {
        const databaseAccountTest = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const { body: databaseAccount, headers } = yield client.getDatabaseAccount();
                assert_1.default.equal(databaseAccount.DatabasesLink, "/dbs/");
                assert_1.default.equal(databaseAccount.MediaLink, "/media/");
                assert_1.default.equal(databaseAccount.MaxMediaStorageUsageInMB, headers["x-ms-max-media-storage-usage-mb"]); // TODO: should use constants here
                assert_1.default.equal(databaseAccount.CurrentMediaStorageUsageInMB, headers["x-ms-media-storage-usage-mb"]);
                assert_1.default(databaseAccount.ConsistencyPolicy !== undefined);
            });
        };
        it("nativeApi Should get database account successfully name based", function () {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                yield databaseAccountTest();
            });
        });
    });
});
//# sourceMappingURL=databaseaccount.spec.js.map