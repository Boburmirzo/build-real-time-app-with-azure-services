"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const assert_1 = tslib_1.__importDefault(require("assert"));
const TestHelpers_1 = require("../common/TestHelpers");
function sleep(time) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return new Promise(resolve => {
            setTimeout(resolve, time);
        });
    });
}
describe("NodeJS CRUD Tests", function () {
    this.timeout(process.env.MOCHA_TIMEOUT || 600000);
    beforeEach(function () {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield TestHelpers_1.removeAllDatabases();
        });
    });
    describe("TTL tests", function () {
        function createcontainerWithInvalidDefaultTtl(db, containerDefinition, collId, defaultTtl) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                containerDefinition.id = collId;
                containerDefinition.defaultTtl = defaultTtl;
                try {
                    yield db.containers.create(containerDefinition);
                }
                catch (err) {
                    const badRequestErrorCode = 400;
                    assert_1.default.equal(err.code, badRequestErrorCode, "response should return error code " + badRequestErrorCode);
                }
            });
        }
        function createItemWithInvalidTtl(container, itemDefinition, itemId, ttl) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                itemDefinition.id = itemId;
                itemDefinition.ttl = ttl;
                try {
                    yield container.items.create(itemDefinition);
                    assert_1.default.fail("Must throw if using invalid TTL");
                }
                catch (err) {
                    const badRequestErrorCode = 400;
                    assert_1.default.equal(err.code, badRequestErrorCode, "response should return error code " + badRequestErrorCode);
                }
            });
        }
        it("nativeApi Validate container and Item TTL values.", function () {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                try {
                    const database = yield TestHelpers_1.getTestDatabase("ttl test1 database");
                    const containerDefinition = {
                        id: "sample container1",
                        defaultTtl: 5
                    };
                    const { body: containerResult } = yield database.containers.create(containerDefinition);
                    assert_1.default.equal(containerDefinition.defaultTtl, containerResult.defaultTtl);
                    const container = database.container(containerResult.id);
                    // null, 0, -10 are unsupported value for defaultTtl.Valid values are -1 or a non-zero positive 32-bit integer value
                    yield createcontainerWithInvalidDefaultTtl(database, containerDefinition, "sample container2", null);
                    yield createcontainerWithInvalidDefaultTtl(database, containerDefinition, "sample container3", 0);
                    yield createcontainerWithInvalidDefaultTtl(database, containerDefinition, "sample container4", -10);
                    const itemDefinition = {
                        id: "doc",
                        name: "sample Item",
                        key: "value",
                        ttl: 2
                    };
                    // 0, null, -10 are unsupported value for ttl.Valid values are -1 or a non-zero positive 32-bit integer value
                    yield createItemWithInvalidTtl(container, itemDefinition, "doc1", 0);
                    yield createItemWithInvalidTtl(container, itemDefinition, "doc2", null);
                    yield createItemWithInvalidTtl(container, itemDefinition, "doc3", -10);
                }
                catch (err) {
                    throw err;
                }
            });
        });
        function checkItemGone(container, createdItem) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                try {
                    yield container.item(createdItem.id).read();
                    assert_1.default.fail("Must throw if the Item isn't there");
                }
                catch (err) {
                    const badRequestErrorCode = 404;
                    assert_1.default.equal(err.code, badRequestErrorCode, "response should return error code " + badRequestErrorCode);
                }
            });
        }
        function checkItemExists(container, createdItem) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const { body: readItem } = yield container.item(createdItem.id).read();
                assert_1.default.equal(readItem.ttl, createdItem.ttl);
            });
        }
        function positiveDefaultTtlStep4(container, createdItem) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // the created Item should NOT be gone as it 's ttl value is set to 8 which overrides the containers' s defaultTtl value(5)
                yield checkItemExists(container, createdItem);
                yield sleep(4000);
                yield checkItemGone(container, createdItem);
            });
        }
        function positiveDefaultTtlStep3(container, createdItem, itemDefinition) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // the created Item should be gone now as it 's ttl value is set to 2 which overrides the containers' s defaultTtl value(5)
                yield checkItemGone(container, createdItem);
                itemDefinition.id = "doc4";
                itemDefinition.ttl = 8;
                const { body: doc } = yield container.items.create(itemDefinition);
                yield sleep(6000);
                yield positiveDefaultTtlStep4(container, doc);
            });
        }
        function positiveDefaultTtlStep2(container, createdItem, itemDefinition) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // the created Item should NOT be gone as it 's ttl value is set to -1(never expire) which overrides the containers' s defaultTtl value
                yield checkItemExists(container, createdItem);
                itemDefinition.id = "doc3";
                itemDefinition.ttl = 2;
                const { body: doc } = yield container.items.create(itemDefinition);
                yield sleep(4000);
                yield positiveDefaultTtlStep3(container, doc, itemDefinition);
            });
        }
        function positiveDefaultTtlStep1(container, createdItem, itemDefinition) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // the created Item should be gone now as it 's ttl value would be same as defaultTtl value of the container
                yield checkItemGone(container, createdItem);
                itemDefinition.id = "doc2";
                itemDefinition.ttl = -1;
                const { body: doc } = yield container.items.create(itemDefinition);
                yield sleep(5000);
                yield positiveDefaultTtlStep2(container, doc, itemDefinition);
            });
        }
        it("nativeApi Validate Item TTL with positive defaultTtl.", function () {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const database = yield TestHelpers_1.getTestDatabase("ttl test2 database");
                const containerDefinition = {
                    id: "sample container",
                    defaultTtl: 5
                };
                const { body: containerResult } = yield database.containers.create(containerDefinition);
                const container = yield database.container(containerResult.id);
                const itemDefinition = {
                    id: "doc1",
                    name: "sample Item",
                    key: "value"
                };
                const { body: createdItem } = yield container.items.create(itemDefinition);
                yield sleep(7000);
                yield positiveDefaultTtlStep1(container, createdItem, itemDefinition);
            });
        });
        function minusOneDefaultTtlStep1(container, createdItem1, createdItem2, createdItem3) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // the created Item should be gone now as it 's ttl value is set to 2 which overrides the containers' s defaultTtl value(-1)
                yield checkItemGone(container, createdItem3);
                // The Items with id doc1 and doc2 will never expire
                const { body: readItem1 } = yield container.item(createdItem1.id).read();
                assert_1.default.equal(readItem1.id, createdItem1.id);
                const { body: readItem2 } = yield container.item(createdItem2.id).read();
                assert_1.default.equal(readItem2.id, createdItem2.id);
            });
        }
        it("nativeApi Validate Item TTL with -1 defaultTtl.", function () {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const database = yield TestHelpers_1.getTestDatabase("ttl test2 database");
                const containerDefinition = {
                    id: "sample container",
                    defaultTtl: -1
                };
                const { body: createdContainer } = yield database.containers.create(containerDefinition);
                const container = yield database.container(createdContainer.id);
                const itemDefinition = {
                    id: "doc1",
                    name: "sample Item",
                    key: "value"
                };
                // the created Item 's ttl value would be -1 inherited from the container' s defaultTtl and this Item will never expire
                const { body: createdItem1 } = yield container.items.create(itemDefinition);
                // This Item is also set to never expire explicitly
                itemDefinition.id = "doc2";
                itemDefinition.ttl = -1;
                const { body: createdItem2 } = yield container.items.create(itemDefinition);
                itemDefinition.id = "doc3";
                itemDefinition.ttl = 2;
                const { body: createdItem3 } = yield container.items.create(itemDefinition);
                yield sleep(4000);
                yield minusOneDefaultTtlStep1(container, createdItem1, createdItem2, createdItem3);
            });
        });
        it("nativeApi Validate Item TTL with no defaultTtl.", function () {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const database = yield TestHelpers_1.getTestDatabase("ttl test3 database");
                const containerDefinition = { id: "sample container" };
                const { body: createdContainer } = yield database.containers.create(containerDefinition);
                const container = yield database.container(createdContainer.id);
                const itemDefinition = {
                    id: "doc1",
                    name: "sample Item",
                    key: "value",
                    ttl: 5
                };
                const { body: createdItem } = yield container.items.create(itemDefinition);
                // Created Item still exists even after ttl time has passed since the TTL is disabled at container level(no defaultTtl property defined)
                yield sleep(7000);
                yield checkItemExists(container, createdItem);
            });
        });
        function miscCasesStep4(container, createdItem, itemDefinition) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // Created Item still exists even after ttl time has passed since the TTL is disabled at container level
                yield checkItemExists(container, createdItem);
            });
        }
        function miscCasesStep3(container, upsertedItem, itemDefinition) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // the upserted Item should be gone now after 10 secs from the last write(upsert) of the Item
                yield checkItemGone(container, upsertedItem);
                const query = "SELECT * FROM root r";
                const { result: results } = yield container.items.query(query).toArray();
                assert_1.default.equal(results.length, 0);
                // Use a container definition without defaultTtl to disable ttl at container level
                const containerDefinition = { id: container.id };
                yield container.replace(containerDefinition);
                itemDefinition.id = "doc2";
                const { body: createdItem } = yield container.items.create(itemDefinition);
                yield sleep(5000);
                yield miscCasesStep4(container, createdItem, itemDefinition);
            });
        }
        function miscCasesStep2(container, itemDefinition) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // Upsert the Item after 3 secs to reset the Item 's ttl
                itemDefinition.key = "value2";
                const { body: upsertedItem } = yield container.items.upsert(itemDefinition);
                yield sleep(7000);
                // Upserted Item still exists after (3+7)10 secs from Item creation time( with container 's defaultTtl set to 8) since it' s ttl was reset after 3 secs by upserting it
                yield checkItemExists(container, upsertedItem);
                yield sleep(3000);
                yield miscCasesStep3(container, upsertedItem, itemDefinition);
            });
        }
        function miscCasesStep1(container, createdItem, itemDefinition) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                // the created Item should be gone now as the ttl time expired
                yield checkItemGone(container, createdItem);
                // We can create a Item with the same id after the ttl time has expired
                const { body: doc } = yield container.items.create(itemDefinition);
                assert_1.default.equal(itemDefinition.id, doc.id);
                yield sleep(3000);
                yield miscCasesStep2(container, itemDefinition);
            });
        }
        it("nativeApi Validate Item TTL Misc cases.", function () {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const database = yield TestHelpers_1.getTestDatabase("ttl test4 database");
                const containerDefinition = {
                    id: "sample container",
                    defaultTtl: 8
                };
                const { body: containerResult } = yield database.containers.create(containerDefinition);
                const container = yield database.container(containerResult.id);
                const itemDefinition = {
                    id: "doc1",
                    name: "sample Item",
                    key: "value"
                };
                const { body: createdItem } = yield container.items.create(itemDefinition);
                yield sleep(10000);
                yield miscCasesStep1(container, createdItem, itemDefinition);
            });
        });
    });
});
//# sourceMappingURL=ttl.spec.js.map