"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const create_hmac_1 = tslib_1.__importDefault(require("create-hmac"));
const common_1 = require("./common");
/** @hidden */
class AuthHandler {
    static getAuthorizationHeader(authOptions, verb, path, resourceId, resourceType, headers) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (authOptions.permissionFeed) {
                authOptions.resourceTokens = {};
                for (const permission of authOptions.permissionFeed) {
                    const id = common_1.Helper.getResourceIdFromPath(permission.resource);
                    if (!id) {
                        throw new Error(`authorization error: ${id} \
                          is an invalid resourceId in permissionFeed`);
                    }
                    authOptions.resourceTokens[id] = permission._token; // TODO: any
                }
            }
            if (authOptions.masterKey || authOptions.key) {
                const key = authOptions.masterKey || authOptions.key;
                return encodeURIComponent(AuthHandler.getAuthorizationTokenUsingMasterKey(verb, resourceId, resourceType, headers, key));
            }
            else if (authOptions.resourceTokens) {
                return encodeURIComponent(AuthHandler.getAuthorizationTokenUsingResourceTokens(authOptions.resourceTokens, path, resourceId));
            }
            else if (authOptions.tokenProvider) {
                return encodeURIComponent(yield AuthHandler.getAuthorizationTokenUsingTokenProvider(authOptions.tokenProvider, {
                    verb,
                    path,
                    resourceId,
                    resourceType,
                    headers
                }));
            }
        });
    }
    static getAuthorizationTokenUsingMasterKey(verb, resourceId, resourceType, headers, masterKey) {
        if (resourceType === "offers") {
            resourceId = resourceId && resourceId.toLowerCase();
        }
        const key = Buffer.from(masterKey, "base64");
        const text = (verb || "").toLowerCase() +
            "\n" +
            (resourceType || "").toLowerCase() +
            "\n" +
            (resourceId || "") +
            "\n" +
            (headers["x-ms-date"] || "").toLowerCase() +
            "\n" +
            (headers["date"] || "").toLowerCase() +
            "\n";
        const body = Buffer.from(text, "utf8");
        const signature = create_hmac_1.default("sha256", key)
            .update(body)
            .digest("base64");
        const MasterToken = "master";
        const TokenVersion = "1.0";
        return `type=${MasterToken}&ver=${TokenVersion}&sig=${signature}`;
    }
    // TODO: Resource tokens
    static getAuthorizationTokenUsingResourceTokens(resourceTokens, path, resourceId) {
        if (resourceTokens && Object.keys(resourceTokens).length > 0) {
            // For database account access(through getDatabaseAccount API), path and resourceId are "",
            // so in this case we return the first token to be used for creating the auth header as the
            // service will accept any token in this case
            if (!path && !resourceId) {
                return resourceTokens[Object.keys(resourceTokens)[0]];
            }
            if (resourceId && resourceTokens[resourceId]) {
                return resourceTokens[resourceId];
            }
            // minimum valid path /dbs
            if (!path || path.length < 4) {
                return null;
            }
            // remove '/' from left and right of path
            path = path[0] === "/" ? path.substring(1) : path;
            path = path[path.length - 1] === "/" ? path.substring(0, path.length - 1) : path;
            const pathSegments = (path && path.split("/")) || [];
            // if it's an incomplete path like /dbs/db1/colls/, start from the paretn resource
            let index = pathSegments.length % 2 === 0 ? pathSegments.length - 1 : pathSegments.length - 2;
            for (; index > 0; index -= 2) {
                const id = decodeURI(pathSegments[index]);
                if (resourceTokens[id]) {
                    return resourceTokens[id];
                }
            }
        }
        return null;
    }
    static getAuthorizationTokenUsingTokenProvider(tokenProvider, requestInfo) {
        requestInfo.getAuthorizationTokenUsingMasterKey = AuthHandler.getAuthorizationTokenUsingMasterKey;
        return new Promise((resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const callback = (err, token) => {
                if (reject) {
                    return reject(err);
                }
                resolve(token);
            };
            const results = tokenProvider.getToken(requestInfo, callback);
            if (results.then && typeof results.then === "function") {
                resolve(yield results);
            }
        }));
    }
}
exports.AuthHandler = AuthHandler;
//# sourceMappingURL=auth.js.map