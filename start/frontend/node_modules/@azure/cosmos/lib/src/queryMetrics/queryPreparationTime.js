"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const queryMetricsConstants_1 = tslib_1.__importDefault(require("./queryMetricsConstants"));
const queryMetricsUtils_1 = require("./queryMetricsUtils");
const timeSpan_1 = require("./timeSpan");
class QueryPreparationTimes {
    constructor(queryCompilationTime, logicalPlanBuildTime, physicalPlanBuildTime, queryOptimizationTime) {
        this.queryCompilationTime = queryCompilationTime;
        this.logicalPlanBuildTime = logicalPlanBuildTime;
        this.physicalPlanBuildTime = physicalPlanBuildTime;
        this.queryOptimizationTime = queryOptimizationTime;
    }
    /**
     * returns a new QueryPreparationTimes instance that is the addition of this and the arguments.
     */
    add(...queryPreparationTimesArray) {
        if (arguments == null || arguments.length === 0) {
            throw new Error("arguments was null or empty");
        }
        let queryCompilationTime = this.queryCompilationTime;
        let logicalPlanBuildTime = this.logicalPlanBuildTime;
        let physicalPlanBuildTime = this.physicalPlanBuildTime;
        let queryOptimizationTime = this.queryOptimizationTime;
        for (const queryPreparationTimes of queryPreparationTimesArray) {
            if (queryPreparationTimes == null) {
                throw new Error("queryPreparationTimesArray has null or undefined item(s)");
            }
            queryCompilationTime = queryCompilationTime.add(queryPreparationTimes.queryCompilationTime);
            logicalPlanBuildTime = logicalPlanBuildTime.add(queryPreparationTimes.logicalPlanBuildTime);
            physicalPlanBuildTime = physicalPlanBuildTime.add(queryPreparationTimes.physicalPlanBuildTime);
            queryOptimizationTime = queryOptimizationTime.add(queryPreparationTimes.queryOptimizationTime);
        }
        return new QueryPreparationTimes(queryCompilationTime, logicalPlanBuildTime, physicalPlanBuildTime, queryOptimizationTime);
    }
    /**
     * Output the QueryPreparationTimes as a delimited string.
     */
    toDelimitedString() {
        return (`${queryMetricsConstants_1.default.QueryCompileTimeInMs}=${this.queryCompilationTime.totalMilliseconds()};` +
            `${queryMetricsConstants_1.default.LogicalPlanBuildTimeInMs}=${this.logicalPlanBuildTime.totalMilliseconds()};` +
            `${queryMetricsConstants_1.default.PhysicalPlanBuildTimeInMs}=${this.physicalPlanBuildTime.totalMilliseconds()};` +
            `${queryMetricsConstants_1.default.QueryOptimizationTimeInMs}=${this.queryOptimizationTime.totalMilliseconds()}`);
    }
    /**
     * Returns a new instance of the QueryPreparationTimes class that is the
     * aggregation of an array of QueryPreparationTimes.
     * @memberof QueryMetrics
     * @instance
     */
    static createFromArray(queryPreparationTimesArray) {
        if (queryPreparationTimesArray == null) {
            throw new Error("queryPreparationTimesArray is null or undefined item(s)");
        }
        return QueryPreparationTimes.zero.add(...queryPreparationTimesArray);
    }
    /**
     * Returns a new instance of the QueryPreparationTimes class this is deserialized from a delimited string.
     * @memberof QueryMetrics
     * @instance
     */
    static createFromDelimitedString(delimitedString) {
        const metrics = queryMetricsUtils_1.QueryMetricsUtils.parseDelimitedString(delimitedString);
        return new QueryPreparationTimes(queryMetricsUtils_1.QueryMetricsUtils.timeSpanFromMetrics(metrics, queryMetricsConstants_1.default.QueryCompileTimeInMs), queryMetricsUtils_1.QueryMetricsUtils.timeSpanFromMetrics(metrics, queryMetricsConstants_1.default.LogicalPlanBuildTimeInMs), queryMetricsUtils_1.QueryMetricsUtils.timeSpanFromMetrics(metrics, queryMetricsConstants_1.default.PhysicalPlanBuildTimeInMs), queryMetricsUtils_1.QueryMetricsUtils.timeSpanFromMetrics(metrics, queryMetricsConstants_1.default.QueryOptimizationTimeInMs));
    }
}
QueryPreparationTimes.zero = new QueryPreparationTimes(timeSpan_1.TimeSpan.zero, timeSpan_1.TimeSpan.zero, timeSpan_1.TimeSpan.zero, timeSpan_1.TimeSpan.zero);
exports.QueryPreparationTimes = QueryPreparationTimes;
//# sourceMappingURL=queryPreparationTime.js.map