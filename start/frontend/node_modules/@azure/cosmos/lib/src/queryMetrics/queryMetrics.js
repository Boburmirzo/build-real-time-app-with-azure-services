"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const clientSideMetrics_1 = require("./clientSideMetrics");
const queryMetricsConstants_1 = tslib_1.__importDefault(require("./queryMetricsConstants"));
const queryMetricsUtils_1 = require("./queryMetricsUtils");
const queryPreparationTime_1 = require("./queryPreparationTime");
const runtimeExecutionTimes_1 = require("./runtimeExecutionTimes");
const timeSpan_1 = require("./timeSpan");
class QueryMetrics {
    constructor(retrievedDocumentCount, retrievedDocumentSize, outputDocumentCount, outputDocumentSize, indexHitDocumentCount, totalQueryExecutionTime, queryPreparationTimes, indexLookupTime, documentLoadTime, vmExecutionTime, runtimeExecutionTimes, documentWriteTime, clientSideMetrics) {
        this.retrievedDocumentCount = retrievedDocumentCount;
        this.retrievedDocumentSize = retrievedDocumentSize;
        this.outputDocumentCount = outputDocumentCount;
        this.outputDocumentSize = outputDocumentSize;
        this.indexHitDocumentCount = indexHitDocumentCount;
        this.totalQueryExecutionTime = totalQueryExecutionTime;
        this.queryPreparationTimes = queryPreparationTimes;
        this.indexLookupTime = indexLookupTime;
        this.documentLoadTime = documentLoadTime;
        this.vmExecutionTime = vmExecutionTime;
        this.runtimeExecutionTimes = runtimeExecutionTimes;
        this.documentWriteTime = documentWriteTime;
        this.clientSideMetrics = clientSideMetrics;
    }
    /**
     * Gets the IndexHitRatio
     * @memberof QueryMetrics
     * @instance
     * @ignore
     */
    get indexHitRatio() {
        return this.retrievedDocumentCount === 0 ? 1 : this.indexHitDocumentCount / this.retrievedDocumentCount;
    }
    /**
     * returns a new QueryMetrics instance that is the addition of this and the arguments.
     */
    add(queryMetricsArray) {
        if (arguments == null || arguments.length === 0) {
            throw new Error("arguments was null or empty");
        }
        let retrievedDocumentCount = 0;
        let retrievedDocumentSize = 0;
        let outputDocumentCount = 0;
        let outputDocumentSize = 0;
        let indexHitDocumentCount = 0;
        let totalQueryExecutionTime = timeSpan_1.TimeSpan.zero;
        const queryPreparationTimesArray = [];
        let indexLookupTime = timeSpan_1.TimeSpan.zero;
        let documentLoadTime = timeSpan_1.TimeSpan.zero;
        let vmExecutionTime = timeSpan_1.TimeSpan.zero;
        const runtimeExecutionTimesArray = [];
        let documentWriteTime = timeSpan_1.TimeSpan.zero;
        const clientSideQueryMetricsArray = [];
        queryMetricsArray.push(this);
        for (const queryMetrics of queryMetricsArray) {
            if (queryMetrics == null) {
                throw new Error("queryMetricsArray has null or undefined item(s)");
            }
            retrievedDocumentCount += queryMetrics.retrievedDocumentCount;
            retrievedDocumentSize += queryMetrics.retrievedDocumentSize;
            outputDocumentCount += queryMetrics.outputDocumentCount;
            outputDocumentSize += queryMetrics.outputDocumentSize;
            indexHitDocumentCount += queryMetrics.indexHitDocumentCount;
            totalQueryExecutionTime = totalQueryExecutionTime.add(queryMetrics.totalQueryExecutionTime);
            queryPreparationTimesArray.push(queryMetrics.queryPreparationTimes);
            indexLookupTime = indexLookupTime.add(queryMetrics.indexLookupTime);
            documentLoadTime = documentLoadTime.add(queryMetrics.documentLoadTime);
            vmExecutionTime = vmExecutionTime.add(queryMetrics.vmExecutionTime);
            runtimeExecutionTimesArray.push(queryMetrics.runtimeExecutionTimes);
            documentWriteTime = documentWriteTime.add(queryMetrics.documentWriteTime);
            clientSideQueryMetricsArray.push(queryMetrics.clientSideMetrics);
        }
        return new QueryMetrics(retrievedDocumentCount, retrievedDocumentSize, outputDocumentCount, outputDocumentSize, indexHitDocumentCount, totalQueryExecutionTime, queryPreparationTime_1.QueryPreparationTimes.createFromArray(queryPreparationTimesArray), indexLookupTime, documentLoadTime, vmExecutionTime, runtimeExecutionTimes_1.RuntimeExecutionTimes.createFromArray(runtimeExecutionTimesArray), documentWriteTime, clientSideMetrics_1.ClientSideMetrics.createFromArray(...clientSideQueryMetricsArray));
    }
    /**
     * Output the QueryMetrics as a delimited string.
     * @memberof QueryMetrics
     * @instance
     * @ignore
     */
    toDelimitedString() {
        return (queryMetricsConstants_1.default.RetrievedDocumentCount +
            "=" +
            this.retrievedDocumentCount +
            ";" +
            queryMetricsConstants_1.default.RetrievedDocumentSize +
            "=" +
            this.retrievedDocumentSize +
            ";" +
            queryMetricsConstants_1.default.OutputDocumentCount +
            "=" +
            this.outputDocumentCount +
            ";" +
            queryMetricsConstants_1.default.OutputDocumentSize +
            "=" +
            this.outputDocumentSize +
            ";" +
            queryMetricsConstants_1.default.IndexHitRatio +
            "=" +
            this.indexHitRatio +
            ";" +
            queryMetricsConstants_1.default.TotalQueryExecutionTimeInMs +
            "=" +
            this.totalQueryExecutionTime.totalMilliseconds() +
            ";" +
            this.queryPreparationTimes.toDelimitedString() +
            ";" +
            queryMetricsConstants_1.default.IndexLookupTimeInMs +
            "=" +
            this.indexLookupTime.totalMilliseconds() +
            ";" +
            queryMetricsConstants_1.default.DocumentLoadTimeInMs +
            "=" +
            this.documentLoadTime.totalMilliseconds() +
            ";" +
            queryMetricsConstants_1.default.VMExecutionTimeInMs +
            "=" +
            this.vmExecutionTime.totalMilliseconds() +
            ";" +
            this.runtimeExecutionTimes.toDelimitedString() +
            ";" +
            queryMetricsConstants_1.default.DocumentWriteTimeInMs +
            "=" +
            this.documentWriteTime.totalMilliseconds());
    }
    /**
     * Returns a new instance of the QueryMetrics class that is the aggregation of an array of query metrics.
     * @memberof QueryMetrics
     * @instance
     */
    static createFromArray(queryMetricsArray) {
        if (queryMetricsArray == null) {
            throw new Error("queryMetricsArray is null or undefined item(s)");
        }
        return QueryMetrics.zero.add(queryMetricsArray);
    }
    /**
     * Returns a new instance of the QueryMetrics class this is deserialized from a delimited string.
     * @memberof QueryMetrics
     * @instance
     */
    static createFromDelimitedString(delimitedString, clientSideMetrics) {
        const metrics = queryMetricsUtils_1.QueryMetricsUtils.parseDelimitedString(delimitedString);
        const indexHitRatio = metrics[queryMetricsConstants_1.default.IndexHitRatio] || 0;
        const retrievedDocumentCount = metrics[queryMetricsConstants_1.default.RetrievedDocumentCount] || 0;
        const indexHitCount = indexHitRatio * retrievedDocumentCount;
        const outputDocumentCount = metrics[queryMetricsConstants_1.default.OutputDocumentCount] || 0;
        const outputDocumentSize = metrics[queryMetricsConstants_1.default.OutputDocumentSize] || 0;
        const retrievedDocumentSize = metrics[queryMetricsConstants_1.default.RetrievedDocumentSize] || 0;
        const totalQueryExecutionTime = queryMetricsUtils_1.QueryMetricsUtils.timeSpanFromMetrics(metrics, queryMetricsConstants_1.default.TotalQueryExecutionTimeInMs);
        return new QueryMetrics(retrievedDocumentCount, retrievedDocumentSize, outputDocumentCount, outputDocumentSize, indexHitCount, totalQueryExecutionTime, queryPreparationTime_1.QueryPreparationTimes.createFromDelimitedString(delimitedString), queryMetricsUtils_1.QueryMetricsUtils.timeSpanFromMetrics(metrics, queryMetricsConstants_1.default.IndexLookupTimeInMs), queryMetricsUtils_1.QueryMetricsUtils.timeSpanFromMetrics(metrics, queryMetricsConstants_1.default.DocumentLoadTimeInMs), queryMetricsUtils_1.QueryMetricsUtils.timeSpanFromMetrics(metrics, queryMetricsConstants_1.default.VMExecutionTimeInMs), runtimeExecutionTimes_1.RuntimeExecutionTimes.createFromDelimitedString(delimitedString), queryMetricsUtils_1.QueryMetricsUtils.timeSpanFromMetrics(metrics, queryMetricsConstants_1.default.DocumentWriteTimeInMs), clientSideMetrics || clientSideMetrics_1.ClientSideMetrics.zero);
    }
}
QueryMetrics.zero = new QueryMetrics(0, 0, 0, 0, 0, timeSpan_1.TimeSpan.zero, queryPreparationTime_1.QueryPreparationTimes.zero, timeSpan_1.TimeSpan.zero, timeSpan_1.TimeSpan.zero, timeSpan_1.TimeSpan.zero, runtimeExecutionTimes_1.RuntimeExecutionTimes.zero, timeSpan_1.TimeSpan.zero, clientSideMetrics_1.ClientSideMetrics.zero);
exports.QueryMetrics = QueryMetrics;
//# sourceMappingURL=queryMetrics.js.map