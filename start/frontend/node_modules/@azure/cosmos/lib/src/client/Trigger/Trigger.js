"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const common_1 = require("../../common");
/**
 * Operations to read, replace, or delete a {@link Trigger}.
 *
 * Use `container.triggers` to create, upsert, query, or read all.
 */
class Trigger {
    /**
     * @hidden
     * @param container The parent {@link Container}.
     * @param id The id of the given {@link Trigger}.
     */
    constructor(container, id, clientContext) {
        this.container = container;
        this.id = id;
        this.clientContext = clientContext;
        this.client = this.container.database.client;
    }
    /**
     * Returns a reference URL to the resource. Used for linking in Permissions.
     */
    get url() {
        return common_1.UriFactory.createTriggerUri(this.container.database.id, this.container.id, this.id);
    }
    /**
     * Read the {@link TriggerDefinition} for the given {@link Trigger}.
     * @param options
     */
    read(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const path = common_1.Helper.getPathFromLink(this.url);
            const id = common_1.Helper.getIdFromLink(this.url);
            const response = yield this.clientContext.read(path, "triggers", id, undefined, options);
            return { body: response.result, headers: response.headers, ref: this, trigger: this };
        });
    }
    /**
     * Replace the given {@link Trigger} with the specified {@link TriggerDefinition}.
     * @param body The specified {@link TriggerDefinition} to replace the existing definition with.
     * @param options
     */
    replace(body, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (body.body) {
                body.body = body.body.toString();
            }
            const err = {};
            if (!common_1.Helper.isResourceValid(body, err)) {
                throw err;
            }
            const path = common_1.Helper.getPathFromLink(this.url);
            const id = common_1.Helper.getIdFromLink(this.url);
            const response = yield this.clientContext.replace(body, path, "triggers", id, undefined, options);
            return { body: response.result, headers: response.headers, ref: this, trigger: this };
        });
    }
    /**
     * Delete the given {@link Trigger}.
     * @param options
     */
    delete(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const path = common_1.Helper.getPathFromLink(this.url);
            const id = common_1.Helper.getIdFromLink(this.url);
            const response = yield this.clientContext.delete(path, "triggers", id, undefined, options);
            return { body: response.result, headers: response.headers, ref: this, trigger: this };
        });
    }
}
exports.Trigger = Trigger;
//# sourceMappingURL=Trigger.js.map