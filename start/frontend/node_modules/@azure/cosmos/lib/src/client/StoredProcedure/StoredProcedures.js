"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const common_1 = require("../../common");
const queryIterator_1 = require("../../queryIterator");
const StoredProcedure_1 = require("./StoredProcedure");
/**
 * Operations for creating, upserting, or reading/querying all Stored Procedures.
 *
 * For operations to read, replace, delete, or execute a specific, existing stored procedure by id, see `container.storedProcedure()`.
 */
class StoredProcedures {
    /**
     * @param container The parent {@link Container}.
     * @hidden
     */
    constructor(container, clientContext) {
        this.container = container;
        this.clientContext = clientContext;
    }
    query(query, options) {
        const path = common_1.Helper.getPathFromLink(this.container.url, "sprocs");
        const id = common_1.Helper.getIdFromLink(this.container.url);
        return new queryIterator_1.QueryIterator(this.clientContext, query, options, innerOptions => {
            return this.clientContext.queryFeed(path, "sprocs", id, result => result.StoredProcedures, query, innerOptions);
        });
    }
    /**
     * Read all stored procedures.
     * @param options
     * @example Read all stored procedures to array.
     * ```typescript
     * const {body: sprocList} = await containers.storedProcedures.readAll().toArray();
     * ```
     */
    readAll(options) {
        return this.query(undefined, options);
    }
    /**
     * Create a StoredProcedure.
     *
     * Azure Cosmos DB allows stored procedures to be executed in the storage tier,
     * directly against an item container. The script
     * gets executed under ACID transactions on the primary storage partition of the
     * specified container. For additional details,
     * refer to the server-side JavaScript API documentation.
     */
    create(body, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (body.body) {
                body.body = body.body.toString();
            }
            const err = {};
            if (!common_1.Helper.isResourceValid(body, err)) {
                throw err;
            }
            const path = common_1.Helper.getPathFromLink(this.container.url, "sprocs");
            const id = common_1.Helper.getIdFromLink(this.container.url);
            const response = yield this.clientContext.create(body, path, "sprocs", id, undefined, options);
            const ref = new StoredProcedure_1.StoredProcedure(this.container, response.result.id, this.clientContext);
            return { body: response.result, headers: response.headers, ref, storedProcedure: ref, sproc: ref };
        });
    }
    /**
     * Upsert a StoredProcedure.
     *
     * Azure Cosmos DB allows stored procedures to be executed in the storage tier,
     * directly against a document container. The script
     * gets executed under ACID transactions on the primary storage partition of the
     *  specified container. For additional details,
     * refer to the server-side JavaScript API documentation.
     *
     */
    upsert(body, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (body.body) {
                body.body = body.body.toString();
            }
            const err = {};
            if (!common_1.Helper.isResourceValid(body, err)) {
                throw err;
            }
            const path = common_1.Helper.getPathFromLink(this.container.url, "sprocs");
            const id = common_1.Helper.getIdFromLink(this.container.url);
            const response = yield this.clientContext.upsert(body, path, "sprocs", id, undefined, options);
            const ref = new StoredProcedure_1.StoredProcedure(this.container, response.result.id, this.clientContext);
            return { body: response.result, headers: response.headers, ref, storedProcedure: ref, sproc: ref };
        });
    }
}
exports.StoredProcedures = StoredProcedures;
//# sourceMappingURL=StoredProcedures.js.map