"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const common_1 = require("../../common");
const Permission_1 = require("../Permission");
/**
 * Used to read, replace, and delete Users.
 *
 * Additionally, you can access the permissions for a given user via `user.permission` and `user.permissions`.
 *
 * @see {@link Users} to create, upsert, query, or read all.
 */
class User {
    /**
     * @hidden
     * @param database The parent {@link Database}.
     * @param id
     */
    constructor(database, id, clientContext) {
        this.database = database;
        this.id = id;
        this.clientContext = clientContext;
        this.permissions = new Permission_1.Permissions(this, this.clientContext);
    }
    /**
     * Returns a reference URL to the resource. Used for linking in Permissions.
     */
    get url() {
        return common_1.UriFactory.createUserUri(this.database.id, this.id);
    }
    /**
     * Operations to read, replace, or delete a specific Permission by id.
     *
     * See `client.permissions` for creating, upserting, querying, or reading all operations.
     * @param id
     */
    permission(id) {
        return new Permission_1.Permission(this, id, this.clientContext);
    }
    /**
     * Read the {@link UserDefinition} for the given {@link User}.
     * @param options
     */
    read(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const path = common_1.Helper.getPathFromLink(this.url);
            const id = common_1.Helper.getIdFromLink(this.url);
            const response = yield this.clientContext.read(path, "users", id, undefined, options);
            return { body: response.result, headers: response.headers, ref: this, user: this };
        });
    }
    /**
     * Replace the given {@link User}'s definition with the specified {@link UserDefinition}.
     * @param body The specified {@link UserDefinition} to replace the definition.
     * @param options
     */
    replace(body, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const err = {};
            if (!common_1.Helper.isResourceValid(body, err)) {
                throw err;
            }
            const path = common_1.Helper.getPathFromLink(this.url);
            const id = common_1.Helper.getIdFromLink(this.url);
            const response = yield this.clientContext.replace(body, path, "users", id, undefined, options);
            return { body: response.result, headers: response.headers, ref: this, user: this };
        });
    }
    /**
     * Delete the given {@link User}.
     * @param options
     */
    delete(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const path = common_1.Helper.getPathFromLink(this.url);
            const id = common_1.Helper.getIdFromLink(this.url);
            const response = yield this.clientContext.delete(path, "users", id, undefined, options);
            return { body: response.result, headers: response.headers, ref: this, user: this };
        });
    }
}
exports.User = User;
//# sourceMappingURL=User.js.map