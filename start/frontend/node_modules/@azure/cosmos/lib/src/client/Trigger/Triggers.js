"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const common_1 = require("../../common");
const queryIterator_1 = require("../../queryIterator");
const Trigger_1 = require("./Trigger");
/**
 * Operations to create, upsert, query, and read all triggers.
 *
 * Use `container.triggers` to read, replace, or delete a {@link Trigger}.
 */
class Triggers {
    /**
     * @hidden
     * @param container The parent {@link Container}.
     */
    constructor(container, clientContext) {
        this.container = container;
        this.clientContext = clientContext;
    }
    query(query, options) {
        const path = common_1.Helper.getPathFromLink(this.container.url, "triggers");
        const id = common_1.Helper.getIdFromLink(this.container.url);
        return new queryIterator_1.QueryIterator(this.clientContext, query, options, innerOptions => {
            return this.clientContext.queryFeed(path, "triggers", id, result => result.Triggers, query, innerOptions);
        });
    }
    /**
     * Read all Triggers.
     * @param options
     * @example Read all trigger to array.
     * ```typescript
     * const {body: triggerList} = await container.triggers.readAll().toArray();
     * ```
     */
    readAll(options) {
        return this.query(undefined, options);
    }
    /**
     * Create a trigger.
     *
     * Azure Cosmos DB supports pre and post triggers defined in JavaScript to be executed
     * on creates, updates and deletes.
     *
     * For additional details, refer to the server-side JavaScript API documentation.
     * @param body
     * @param options
     */
    create(body, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (body.body) {
                body.body = body.body.toString();
            }
            const err = {};
            if (!common_1.Helper.isResourceValid(body, err)) {
                throw err;
            }
            const path = common_1.Helper.getPathFromLink(this.container.url, "triggers");
            const id = common_1.Helper.getIdFromLink(this.container.url);
            const response = yield this.clientContext.create(body, path, "triggers", id, undefined, options);
            const ref = new Trigger_1.Trigger(this.container, response.result.id, this.clientContext);
            return { body: response.result, headers: response.headers, ref, trigger: ref };
        });
    }
    /**
     * Upsert a trigger.
     *
     * Azure Cosmos DB supports pre and post triggers defined in JavaScript to be
     * executed on creates, updates and deletes.
     *
     * For additional details, refer to the server-side JavaScript API documentation.
     * @param body
     * @param options
     */
    upsert(body, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (body.body) {
                body.body = body.body.toString();
            }
            const err = {};
            if (!common_1.Helper.isResourceValid(body, err)) {
                throw err;
            }
            const path = common_1.Helper.getPathFromLink(this.container.url, "triggers");
            const id = common_1.Helper.getIdFromLink(this.container.url);
            const response = yield this.clientContext.upsert(body, path, "triggers", id, undefined, options);
            const ref = new Trigger_1.Trigger(this.container, response.result.id, this.clientContext);
            return { body: response.result, headers: response.headers, ref, trigger: ref };
        });
    }
}
exports.Triggers = Triggers;
//# sourceMappingURL=Triggers.js.map