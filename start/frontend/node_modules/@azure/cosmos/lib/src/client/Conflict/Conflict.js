"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const common_1 = require("../../common");
/**
 * Use to read or delete a given {@link Conflict} by id.
 *
 * @see {@link Conflicts} to query or read all conflicts.
 */
class Conflict {
    /**
     * @hidden
     * @param container The parent {@link Container}.
     * @param id The id of the given {@link Conflict}.
     */
    constructor(container, id, clientContext) {
        this.container = container;
        this.id = id;
        this.clientContext = clientContext;
    }
    /**
     * Returns a reference URL to the resource. Used for linking in Permissions.
     */
    get url() {
        return `/${this.container.url}/${common_1.Constants.Path.ConflictsPathSegment}/${this.id}`;
    }
    /**
     * Read the {@link ConflictDefinition} for the given {@link Conflict}.
     * @param options
     */
    read(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const path = common_1.Helper.getPathFromLink(this.url, "conflicts");
            const id = common_1.Helper.getIdFromLink(this.url);
            const response = yield this.clientContext.read(path, "users", id, undefined, options);
            return { body: response.result, headers: response.headers, ref: this, conflict: this };
        });
    }
    /**
     * Delete the given {@link ConflictDefinition}.
     * @param options
     */
    delete(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const path = common_1.Helper.getPathFromLink(this.url);
            const id = common_1.Helper.getIdFromLink(this.url);
            const response = yield this.clientContext.delete(path, "conflicts", id, undefined, options);
            return { body: response.result, headers: response.headers, ref: this, conflict: this };
        });
    }
}
exports.Conflict = Conflict;
//# sourceMappingURL=Conflict.js.map