"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const common_1 = require("../../common");
const queryIterator_1 = require("../../queryIterator");
const Permission_1 = require("./Permission");
/**
 * Use to create, replace, query, and read all Permissions.
 *
 * @see {@link Permission} to read, replace, or delete a specific permission by id.
 */
class Permissions {
    /**
     * @hidden
     * @param user The parent {@link User}.
     */
    constructor(user, clientContext) {
        this.user = user;
        this.clientContext = clientContext;
    }
    query(query, options) {
        const path = common_1.Helper.getPathFromLink(this.user.url, "permissions");
        const id = common_1.Helper.getIdFromLink(this.user.url);
        return new queryIterator_1.QueryIterator(this.clientContext, query, options, innerOptions => {
            return this.clientContext.queryFeed(path, "permissions", id, result => result.Permissions, query, innerOptions);
        });
    }
    /**
     * Read all permissions.
     * @param options
     * @example Read all permissions to array.
     * ```typescript
     * const {body: permissionList} = await user.permissions.readAll().toArray();
     * ```
     */
    readAll(options) {
        return this.query(undefined, options);
    }
    /**
     * Create a permission.
     *
     * A permission represents a per-User Permission to access a specific resource
     * e.g. Item or Container.
     * @param body Represents the body of the permission.
     */
    create(body, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const err = {};
            if (!common_1.Helper.isResourceValid(body, err)) {
                throw err;
            }
            const path = common_1.Helper.getPathFromLink(this.user.url, "permissions");
            const id = common_1.Helper.getIdFromLink(this.user.url);
            const response = yield this.clientContext.create(body, path, "permissions", id, undefined, options);
            const ref = new Permission_1.Permission(this.user, response.result.id, this.clientContext);
            return {
                body: response.result,
                headers: response.headers,
                ref,
                permission: ref
            };
        });
    }
    /**
     * Upsert a permission.
     *
     * A permission represents a per-User Permission to access a
     * specific resource e.g. Item or Container.
     */
    upsert(body, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const err = {};
            if (!common_1.Helper.isResourceValid(body, err)) {
                throw err;
            }
            const path = common_1.Helper.getPathFromLink(this.user.url, "permissions");
            const id = common_1.Helper.getIdFromLink(this.user.url);
            const response = yield this.clientContext.upsert(body, path, "permissions", id, undefined, options);
            const ref = new Permission_1.Permission(this.user, response.result.id, this.clientContext);
            return {
                body: response.result,
                headers: response.headers,
                ref,
                permission: ref
            };
        });
    }
}
exports.Permissions = Permissions;
//# sourceMappingURL=Permissions.js.map