"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/**
 * This class implements the resource throttle retry policy for requests.
 * @hidden
 */
class ResourceThrottleRetryPolicy {
    /**
     * @constructor ResourceThrottleRetryPolicy
     * @param {int} maxRetryAttemptCount               - Max number of retries to be performed for a request.
     * @param {int} fixedRetryIntervalInMilliseconds   - Fixed retry interval in milliseconds to wait between each \
     * retry ignoring the retryAfter returned as part of the response.
     * @param {int} maxWaitTimeInSeconds               - Max wait time in seconds to wait for a request while the \
     * retries are happening.
     */
    constructor(maxRetryAttemptCount, fixedRetryIntervalInMilliseconds, maxWaitTimeInSeconds) {
        this.maxRetryAttemptCount = maxRetryAttemptCount;
        this.fixedRetryIntervalInMilliseconds = fixedRetryIntervalInMilliseconds;
        /** Current retry attempt count. */
        this.currentRetryAttemptCount = 0;
        /** Cummulative wait time in milliseconds for a request while the retries are happening. */
        this.cummulativeWaitTimeinMilliseconds = 0;
        /** Max wait time in milliseconds to wait for a request while the retries are happening. */
        this.retryAfterInMilliseconds = 0;
        this.maxWaitTimeInMilliseconds = maxWaitTimeInSeconds * 1000;
        this.currentRetryAttemptCount = 0;
        this.cummulativeWaitTimeinMilliseconds = 0;
    }
    /**
     * Determines whether the request should be retried or not.
     * @param {object} err - Error returned by the request.
     */
    shouldRetry(err) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // TODO: any custom error object
            if (err) {
                if (this.currentRetryAttemptCount < this.maxRetryAttemptCount) {
                    this.currentRetryAttemptCount++;
                    this.retryAfterInMilliseconds = 0;
                    if (this.fixedRetryIntervalInMilliseconds) {
                        this.retryAfterInMilliseconds = this.fixedRetryIntervalInMilliseconds;
                    }
                    else if (err.retryAfterInMilliseconds) {
                        this.retryAfterInMilliseconds = err.retryAfterInMilliseconds;
                    }
                    if (this.cummulativeWaitTimeinMilliseconds < this.maxWaitTimeInMilliseconds) {
                        this.cummulativeWaitTimeinMilliseconds += this.retryAfterInMilliseconds;
                        return true;
                    }
                }
            }
            return false;
        });
    }
}
exports.ResourceThrottleRetryPolicy = ResourceThrottleRetryPolicy;
//# sourceMappingURL=resourceThrottleRetryPolicy.js.map