"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const common_1 = require("../common");
/**
 * This class implements the retry policy for endpoint discovery.
 * @hidden
 */
class EndpointDiscoveryRetryPolicy {
    /**
     * @constructor EndpointDiscoveryRetryPolicy
     * @param {object} globalEndpointManager The GlobalEndpointManager instance.
     */
    constructor(globalEndpointManager, request) {
        this.globalEndpointManager = globalEndpointManager;
        this.request = request;
        this.maxRetryAttemptCount = EndpointDiscoveryRetryPolicy.maxRetryAttemptCount;
        this.currentRetryAttemptCount = 0;
        this.retryAfterInMilliseconds = EndpointDiscoveryRetryPolicy.retryAfterInMilliseconds;
    }
    /**
     * Determines whether the request should be retried or not.
     * @param {object} err - Error returned by the request.
     */
    shouldRetry(err, retryContext, locationEndpoint) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!err) {
                return false;
            }
            if (!retryContext || !locationEndpoint) {
                return false;
            }
            if (!this.globalEndpointManager.enableEndpointDiscovery) {
                return false;
            }
            if (this.currentRetryAttemptCount >= this.maxRetryAttemptCount) {
                return false;
            }
            this.currentRetryAttemptCount++;
            if (common_1.Helper.isReadRequest(this.request)) {
                this.globalEndpointManager.markCurrentLocationUnavailableForRead(locationEndpoint);
            }
            else {
                this.globalEndpointManager.markCurrentLocationUnavailableForWrite(locationEndpoint);
            }
            // Check location index increment
            // TODO: Tracing
            // console.log("Write region was changed, refreshing the regions list from database account
            // and will retry the request.");
            yield this.globalEndpointManager.refreshEndpointList();
            retryContext.retryCount = this.currentRetryAttemptCount;
            retryContext.clearSessionTokenNotAvailable = false;
            retryContext.retryRequestOnPreferredLocations = false;
            return true;
        });
    }
}
EndpointDiscoveryRetryPolicy.maxRetryAttemptCount = 120; // TODO: Constant?
EndpointDiscoveryRetryPolicy.retryAfterInMilliseconds = 1000;
exports.EndpointDiscoveryRetryPolicy = EndpointDiscoveryRetryPolicy;
//# sourceMappingURL=endpointDiscoveryRetryPolicy.js.map