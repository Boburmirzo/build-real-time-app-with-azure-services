"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class LocationRouting {
    get ignorePreferredLocation() {
        return this.pIgnorePreferredLocation;
    }
    get locationIndexToRoute() {
        return this.pLocationIndexToRoute;
    }
    get locationEndpointToRoute() {
        return this.pLocationEndpointToRoute;
    }
    routeToLocation(endpointOrIndex, ignorePreferredLocation) {
        if (arguments.length === 2 && typeof endpointOrIndex === "number") {
            this.pLocationIndexToRoute = endpointOrIndex;
            this.pIgnorePreferredLocation = ignorePreferredLocation;
            this.pLocationEndpointToRoute = undefined;
        }
        else if (arguments.length === 1 && typeof endpointOrIndex === "string") {
            this.pLocationEndpointToRoute = endpointOrIndex;
            this.pLocationIndexToRoute = undefined;
            this.pIgnorePreferredLocation = undefined;
        }
        else {
            throw new Error("Invalid arguments passed to routeToLocation");
        }
    }
    clearRouteToLocation() {
        this.pLocationEndpointToRoute = undefined;
        this.pLocationIndexToRoute = undefined;
        this.pIgnorePreferredLocation = undefined;
    }
}
exports.LocationRouting = LocationRouting;
//# sourceMappingURL=LocationRouting.js.map