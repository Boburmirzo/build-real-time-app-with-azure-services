"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const querystring = tslib_1.__importStar(require("querystring"));
const __1 = require("..");
const retry_1 = require("../retry");
const request_1 = require("./request");
/** @hidden */
class RequestHandler {
    constructor(globalEndpointManager, connectionPolicy, requestAgent) {
        this.globalEndpointManager = globalEndpointManager;
        this.connectionPolicy = connectionPolicy;
        this.requestAgent = requestAgent;
    }
    static createRequestObjectStub(connectionPolicy, requestOptions, body) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return request_1.createRequestObject(connectionPolicy, requestOptions, body);
        });
    }
    /**
     *  Creates the request object, call the passed callback when the response is retrieved.
     * @param {object} globalEndpointManager - an instance of GlobalEndpointManager class.
     * @param {object} connectionPolicy - an instance of ConnectionPolicy that has the connection configs.
     * @param {object} requestAgent - the https agent used for send request
     * @param {string} method - the http request method ( 'get', 'post', 'put', .. etc ).
     * @param {String} hostname - The base url for the endpoint.
     * @param {string} path - the path of the requesed resource.
     * @param {Object} data - the request body. It can be either string, buffer, or undefined.
     * @param {Object} queryParams - query parameters for the request.
     * @param {Object} headers - specific headers for the request.
     * @param {function} callback - the callback that will be called when the response is retrieved and processed.
     */
    static request(globalEndpointManager, connectionPolicy, requestAgent, method, hostname, request, data, queryParams, // TODO: any query params types
    headers) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // TODO: any
            const path = request.path === undefined ? request : request.path;
            let body; // TODO: any
            if (data) {
                body = request_1.bodyFromData(data);
                if (!body) {
                    return {
                        result: {
                            message: "parameter data must be a javascript object, string, or Buffer"
                        },
                        headers: undefined
                    };
                }
            }
            let buffer;
            if (body) {
                if (Buffer.isBuffer(body)) {
                    buffer = body;
                }
                else if (typeof body === "string") {
                    buffer = Buffer.from(body, "utf8");
                }
                else {
                    return {
                        result: {
                            message: "body must be string or Buffer"
                        },
                        headers: undefined
                    };
                }
            }
            const requestOptions = request_1.parse(hostname);
            requestOptions.method = method;
            requestOptions.path += path;
            requestOptions.headers = headers;
            requestOptions.agent = requestAgent;
            requestOptions.secureProtocol = "TLSv1_client_method"; // TODO: Should be a constant
            if (connectionPolicy.DisableSSLVerification === true) {
                requestOptions.rejectUnauthorized = false;
            }
            if (queryParams) {
                requestOptions.path += "?" + querystring.stringify(queryParams);
            }
            if (buffer) {
                requestOptions.headers[__1.Constants.HttpHeaders.ContentLength] = buffer.length;
                return retry_1.RetryUtility.execute(globalEndpointManager, buffer, this.createRequestObjectStub, connectionPolicy, requestOptions, request);
            }
            else {
                return retry_1.RetryUtility.execute(globalEndpointManager, null, this.createRequestObjectStub, connectionPolicy, requestOptions, request);
            }
        });
    }
    /** @ignore */
    get(urlString, request, headers) {
        // TODO: any
        return RequestHandler.request(this.globalEndpointManager, this.connectionPolicy, this.requestAgent, "GET", urlString, request, undefined, "", headers);
    }
    /** @ignore */
    post(urlString, request, body, headers) {
        // TODO: any
        return RequestHandler.request(this.globalEndpointManager, this.connectionPolicy, this.requestAgent, "POST", urlString, request, body, "", headers);
    }
    /** @ignore */
    put(urlString, request, body, headers) {
        // TODO: any
        return RequestHandler.request(this.globalEndpointManager, this.connectionPolicy, this.requestAgent, "PUT", urlString, request, body, "", headers);
    }
    /** @ignore */
    head(urlString, request, headers) {
        // TODO: any
        return RequestHandler.request(this.globalEndpointManager, this.connectionPolicy, this.requestAgent, "HEAD", urlString, request, undefined, "", headers);
    }
    /** @ignore */
    delete(urlString, request, headers) {
        return RequestHandler.request(this.globalEndpointManager, this.connectionPolicy, this.requestAgent, "DELETE", urlString, request, undefined, "", headers);
    }
}
exports.RequestHandler = RequestHandler;
//# sourceMappingURL=RequestHandler.js.map