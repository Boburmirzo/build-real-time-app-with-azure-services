"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/** @hidden */
class OrderByEndpointComponent {
    /**
     * Represents an endpoint in handling an order by query. For each processed orderby \
     * result it returns 'payload' item of the result
     * @constructor OrderByEndpointComponent
     * @param {object} executionContext              - Underlying Execution Context
     * @ignore
     */
    constructor(executionContext) {
        this.executionContext = executionContext;
    }
    /**
     * Execute a provided function on the next element in the OrderByEndpointComponent.
     * @memberof OrderByEndpointComponent
     * @instance
     * @param {callback} callback - Function to execute for each element. the function \
     * takes two parameters error, element.
     */
    nextItem() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const { result: item, headers } = yield this.executionContext.nextItem();
                return {
                    result: item !== undefined ? item.payload : undefined,
                    headers
                };
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieve the current element on the OrderByEndpointComponent.
     * @memberof OrderByEndpointComponent
     * @instance
     * @param {callback} callback - Function to execute for the current element. \
     * the function takes two parameters error, element.
     */
    current() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const { result: item, headers } = yield this.executionContext.current();
                return {
                    result: item !== undefined ? item.payload : undefined,
                    headers
                };
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Determine if there are still remaining resources to processs.
     * @memberof OrderByEndpointComponent
     * @instance
     * @returns {Boolean} true if there is other elements to process in the OrderByEndpointComponent.
     */
    hasMoreResults() {
        return this.executionContext.hasMoreResults();
    }
}
exports.OrderByEndpointComponent = OrderByEndpointComponent;
//# sourceMappingURL=OrderByEndpointComponent.js.map