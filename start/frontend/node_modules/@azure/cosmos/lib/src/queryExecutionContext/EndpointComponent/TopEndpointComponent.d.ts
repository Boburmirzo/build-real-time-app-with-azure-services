import { Response } from "../../request/request";
import { IExecutionContext } from "../IExecutionContext";
import { IEndpointComponent } from "./IEndpointComponent";
/** @hidden */
export declare class TopEndpointComponent implements IEndpointComponent {
    private executionContext;
    private topCount;
    /**
     * Represents an endpoint in handling top query. It only returns as many results as top arg specified.
     * @constructor TopEndpointComponent
     * @param { object } executionContext - Underlying Execution Context
     * @ignore
     */
    constructor(executionContext: IExecutionContext, topCount: number);
    /**
     * Execute a provided function on the next element in the TopEndpointComponent.
     * @memberof TopEndpointComponent
     * @instance
     * @param {callback} callback - Function to execute for each element. \
     * the function takes two parameters error, element.
     */
    nextItem(): Promise<Response<any>>;
    /**
     * Retrieve the current element on the TopEndpointComponent.
     * @memberof TopEndpointComponent
     * @instance
     * @param {callback} callback - Function to execute for the current element. \
     * the function takes two parameters error, element.
     */
    current(): Promise<Response<any>>;
    /**
     * Determine if there are still remaining resources to processs.
     * @memberof TopEndpointComponent
     * @instance
     * @returns {Boolean} true if there is other elements to process in the TopEndpointComponent.
     */
    hasMoreResults(): boolean;
}
