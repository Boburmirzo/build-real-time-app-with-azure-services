"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** @hidden */
const PartitionedQueryContants = {
    QueryInfoPath: "queryInfo",
    TopPath: ["queryInfo", "top"],
    OrderByPath: ["queryInfo", "orderBy"],
    AggregatePath: ["queryInfo", "aggregates"],
    QueryRangesPath: "queryRanges",
    RewrittenQueryPath: ["queryInfo", "rewrittenQuery"]
};
// TODO: any partitionedQueryExecutionInfo
/** @hidden */
class PartitionedQueryExecutionContextInfoParser {
    static parseRewrittenQuery(partitionedQueryExecutionInfo) {
        return this._extract(partitionedQueryExecutionInfo, PartitionedQueryContants.RewrittenQueryPath);
    }
    static parseQueryRanges(partitionedQueryExecutionInfo) {
        return this._extract(partitionedQueryExecutionInfo, PartitionedQueryContants.QueryRangesPath);
    }
    static parseOrderBy(partitionedQueryExecutionInfo) {
        return this._extract(partitionedQueryExecutionInfo, PartitionedQueryContants.OrderByPath);
    }
    static parseAggregates(partitionedQueryExecutionInfo) {
        return this._extract(partitionedQueryExecutionInfo, PartitionedQueryContants.AggregatePath);
    }
    static parseTop(partitionedQueryExecutionInfo) {
        return this._extract(partitionedQueryExecutionInfo, PartitionedQueryContants.TopPath);
    }
    static _extract(partitionedQueryExecutionInfo, path) {
        let item = partitionedQueryExecutionInfo;
        if (typeof path === "string") {
            return item[path];
        }
        if (!Array.isArray(path)) {
            throw new Error(`JSON.stringify(path is expected to be an array`);
        }
        for (const p of path) {
            item = item[p];
            if (item === undefined) {
                return;
            }
        }
        return item;
    }
}
exports.PartitionedQueryExecutionContextInfoParser = PartitionedQueryExecutionContextInfoParser;
//# sourceMappingURL=partitionedQueryExecutionContextInfoParser.js.map